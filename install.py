#!/usr/bin/env python3
"""
Script de instala√ß√£o e verifica√ß√£o do ambiente para o Leitor de Contracheques
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_header():
    print("=" * 60)
    print("üìë LEITOR DE CONTRACHEQUES - INSTALA√á√ÉO")
    print("=" * 60)

def check_python_version():
    """Verifica a vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} detectado")
        print("‚ö†Ô∏è  √â necess√°rio Python 3.8 ou superior")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def install_requirements():
    """Instala as depend√™ncias do requirements.txt"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def check_tesseract():
    """Verifica se o Tesseract est√° instalado"""
    print("\nüîç Verificando Tesseract OCR...")
    
    try:
        result = subprocess.run(
            ["tesseract", "--version"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"‚úÖ {version_line}")
            return True
        else:
            print("‚ùå Tesseract n√£o encontrado no PATH")
            return False
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Tesseract n√£o encontrado")
        return False

def check_tesseract_languages():
    """Verifica se os idiomas necess√°rios est√£o instalados"""
    print("üåê Verificando idiomas do Tesseract...")
    
    try:
        result = subprocess.run(
            ["tesseract", "--list-langs"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        
        if result.returncode == 0:
            languages = result.stdout.strip().split('\n')[1:]  # Primeira linha √© "List of available languages"
            
            required_langs = ['eng', 'por']
            missing_langs = []
            
            for lang in required_langs:
                if lang in languages:
                    print(f"‚úÖ Idioma {lang} dispon√≠vel")
                else:
                    print(f"‚ùå Idioma {lang} n√£o encontrado")
                    missing_langs.append(lang)
            
            if missing_langs:
                print(f"‚ö†Ô∏è  Idiomas faltando: {', '.join(missing_langs)}")
                show_tesseract_install_instructions()
                return False
            
            return True
            
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå N√£o foi poss√≠vel verificar idiomas")
        return False

def show_tesseract_install_instructions():
    """Mostra instru√ß√µes de instala√ß√£o do Tesseract"""
    system = platform.system().lower()
    
    print("\nüìã INSTRU√á√ïES DE INSTALA√á√ÉO DO TESSERACT:")
    print("-" * 50)
    
    if system == "windows":
        print("ü™ü Windows:")
        print("1. Baixe o instalador do Tesseract:")
        print("   https://github.com/UB-Mannheim/tesseract/wiki")
        print("2. Execute o instalador como administrador")
        print("3. Certifique-se de marcar a op√ß√£o para adicionar ao PATH")
        print("4. Instale o pacote de idioma portugu√™s")
        
    elif system == "linux":
        print("üêß Linux (Ubuntu/Debian):")
        print("sudo apt update")
        print("sudo apt install tesseract-ocr tesseract-ocr-por")
        
    elif system == "darwin":
        print("üçé macOS:")
        print("brew install tesseract tesseract-lang")

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = ["temp", "exports"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio '{directory}' criado/verificado")

def test_imports():
    """Testa se as importa√ß√µes principais funcionam"""
    print("\nüß™ Testando importa√ß√µes...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit - OK")
        
        import pytesseract
        print("‚úÖ Pytesseract - OK")
        
        import pdf2image
        print("‚úÖ PDF2Image - OK")
        
        import pandas
        print("‚úÖ Pandas - OK")
        
        import plotly
        print("‚úÖ Plotly - OK")
        
        import cv2
        print("‚úÖ OpenCV - OK")
        
        # Testar importa√ß√µes dos m√≥dulos do projeto
        from config import APP_CONFIG
        print("‚úÖ Config - OK")
        
        from utils import OCRProcessor, DataExtractor, Database
        print("‚úÖ Utils - OK")
        
        from components import FileUploader, DataDisplay
        print("‚úÖ Components - OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False

def run_basic_test():
    """Executa um teste b√°sico do sistema"""
    print("\nüéØ Executando teste b√°sico...")
    
    try:
        from config import create_required_folders
        create_required_folders()
        print("‚úÖ Cria√ß√£o de pastas - OK")
        
        from utils import Database
        db = Database()
        stats = db.get_summary_statistics()
        print("‚úÖ Conex√£o com banco de dados - OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste b√°sico: {e}")
        return False

def show_next_steps():
    """Mostra os pr√≥ximos passos"""
    print("\n" + "=" * 60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("\nüöÄ Para executar a aplica√ß√£o:")
    print("streamlit run app.py")
    print("\nüìñ Para mais informa√ß√µes, consulte o README.md")
    print("\nüåê A aplica√ß√£o abrir√° automaticamente no navegador")
    print("   URL padr√£o: http://localhost:8501")

def main():
    print_header()
    
    success = True
    
    # Verifica√ß√µes b√°sicas
    success &= check_python_version()
    
    # Instala√ß√£o de depend√™ncias
    if success:
        success &= install_requirements()
    
    # Verifica√ß√µes de ferramentas externas
    tesseract_ok = check_tesseract()
    if tesseract_ok:
        check_tesseract_languages()
    else:
        show_tesseract_install_instructions()
        success = False
    
    # Configura√ß√£o do ambiente
    if success:
        create_directories()
        success &= test_imports()
        success &= run_basic_test()
    
    # Resultado final
    if success:
        show_next_steps()
    else:
        print("\n‚ùå Instala√ß√£o incompleta. Resolva os problemas acima e execute novamente.")
        print("üí° Consulte o README.md para mais detalhes sobre a instala√ß√£o.")

if __name__ == "__main__":
    main() 